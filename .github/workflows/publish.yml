name: Publish

on:
  push:
    branches: [main]
  # release:
  #   types: [created]

env:
  CARGO_TERM_COLOR: always
  APP_NAME: mussurana_cache

jobs:
  build:
    name: Build ${{ matrix.config.target }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              os: ubuntu-latest,
              target: x86_64-unknown-linux-gnu,
              build: yarn build --target x86_64-unknown-linux-gnu,
              docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian,
              cross: false
          }
          - {
              os: windows-latest,
              target: x86_64-pc-windows-msvc,
              build: yarn build --target x86_64-pc-windows-msvc,
              cross: false
          }
          - {
              os: macos-latest,
              target: x86_64-apple-darwin,
              build: yarn build --target x86_64-apple-darwin,
              cross: false
            }
          - {
              os: macos-latest,
              target: aarch64-apple-darwin,
              build: yarn build --target aarch64-apple-darwin,
              cross: true
          }
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
            node-version: '20.x'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.config.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.config.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential

      - name: Setup yarn
        uses: threeal/setup-yarn-action@v2.0.0
        with:
          version: latest

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.config.docker }}
        with:
          image: ${{ matrix.config.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.config.build }}

      - name: Build
        if: ${{ !matrix.config.docker }}
        run: ${{ matrix.config.build }}
        env:
          RUST_BACKTRACE: 1

      - name: Prepare artifacts for testing
        run: |
          mkdir -p artifacts
          cp ${{ env.APP_NAME }}.*.node artifacts/
          ls -la artifacts/

      - name: Test
        if: ${{ !matrix.config.cross }}
        run: yarn test

      - name: Test ARM64 build (skip on cross-compile)
        if: ${{ matrix.config.cross }}
        run: echo "Skipping tests for cross-compiled target ${{ matrix.config.target }}"


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.config.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    # if: github.event_name == 'release'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup yarn
        uses: threeal/setup-yarn-action@v2.0.0
        with:
          version: latest

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug artifact structure
        run: |
          echo "Artifact directory structure:"
          find artifacts -type f | sort

      - name: Create npm path
        run: yarn prepublishOnly

      - name: Prepare package.json for publication
        run: yarn artifacts

      - name: Check version and publish
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          cd npm
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc

          if [[ $PACKAGE_VERSION =~ "-alpha" ]]; then
            npm publish --tag alpha --access public
          elif [[ $PACKAGE_VERSION =~ "-beta" ]]; then
            npm publish --tag beta --access public
          elif [[ $PACKAGE_VERSION =~ "-rc" ]]; then
            npm publish --tag rc --access public
          else
            npm publish --access public
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
